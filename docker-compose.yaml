version: "3.7"
services:
  tourserver:
    build:
      context: ./tours-service/tours-service/
      dockerfile: Dockerfile
    image: aplikacijadocker
    container_name: aplikacijakon
    restart: always
    networks:
      - tourserver
    ports:
      - 8081:8081
    depends_on:
      - database

  database:
    image: postgres:16-alpine
    container_name: postgreskon
    restart: always
    networks:
      - tourserver
    ports:
      - 4000:5432
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: nzm
    volumes:
      - database-data:/var/lib/postgresql/data

  encounterserver:
    build:
      context: ./encounters-service/encounters-service/
      dockerfile: Dockerfile
    image: aplikacijaenkdok
    container_name: aplikacijaenkkon
    restart: always
    networks:
      - encounterserver
    ports:
      - 8082:8082
    depends_on:
      - dataenk

  dataenk:
    image: postgres:16-alpine
    container_name: postgresenkkon
    restart: always
    networks:
      - encounterserver
    ports:
      - 4001:5432
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: enknzm
    volumes:
      - dataenk-data:/var/lib/postgresql/data
  
  followerserver:
    build:
      context: ./follower-microservice/follower-microservice/
      dockerfile: Dockerfile
    image: followerdocker
    container_name: aplikacijafollower
    restart: always
    networks:
      - followerserver
    ports:
      - 8089:8089
    environment:
      - PORT=8089
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=Dejann03
    depends_on:
      neo4j:
        condition: service_healthy

  neo4j:
    image: neo4j
    container_name: neo4jfollower
    restart: always
    networks:
      - followerserver
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
         # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p Dejann03 || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10 
    environment:
      - NEO4J_AUTH=neo4j/Dejann03
    volumes:
      - databasef-data:/data

  explorerv:
    build:
      dockerfile: Dockerfile
      context: ./psw-back-end/
      target: final
    restart: on-failure
    networks:
      - databasepsw
    ports:
      - "44333:80"
    environment:
      DATABASE_HOST: databasepsw
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorerv
    depends_on:
      - databasepsw

  databasepsw:
    image: postgres:13
    restart: always
    networks:
      - databasepsw
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: explorerv
    ports:
      - "5432:5432"
    volumes:       
      - type: volume
        source: databasepsw-data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./psw-back-end/init.sql
        target: /tmp/explorerv-init.sql
    
    

volumes:
  database-data:
    name: server-database
  dataenk-data:
    name: server-dataenk
  databasepsw-data:
    name: explorerv
  databasef-data:
    name: server-databasefollower
  

networks:
  tourserver:
    name: tourserver
    driver: bridge
  encounterserver:
    name: encounterserver
    driver: bridge
  databasepsw:
    name: databasepsw
    driver: bridge
  followerserver:
    name: followerserver
    driver: bridge
    
